package dbFabric

import (
	"context"
	"database/sql"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type Storage interface {
	// NewConfig(name, password, port, databaseName, url string) Config // base struct; !change, but can expand, can supplement
	InitDb() (interface{}, error)
}

type Config struct {
	name         string
	password     string
	url          string
	port         string
	databaseName string
}

type Mongo struct {
	Config
	// db *mongo.Database
}

func NewMongoStorage(name, password, url, port, dbName string) Storage {
	return &Mongo{
		Config: Config{name: name, password: password, url: url, port: port, databaseName: dbName},
	}
}

func (m *Mongo) InitDb() (interface{}, error) {

	client, err := mongo.NewClient(options.Client().ApplyURI(m.Config.url + m.Config.port))
	if err != nil {
		return nil, err
	}
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	err = client.Connect(ctx)
	if err != nil {
		return nil, err
	}

	err = client.Ping(context.Background(), nil)
	if err != nil {
		return nil, err
	}
	return client.Database(m.Config.name), nil
}

//base struct method, can override (Postgresql)NewConfig()
func (c *Config) NewConfig(name, password, url, port, databaseName string) Config {
	return Config{
		name: name, password: password,
		port: port, databaseName: databaseName,
		url: url,
	}
}

type PostgreSql struct {
	Config
}

//|| add funcs; expand class
func (p *PostgreSql) Remove(id string) string {
	return "remove by id"
}

// psql : PostgreSql{}; psql.NewSqlStorage()
func NewPostgresStorage(name, password, url, port, dbName string) Storage {
	return &PostgreSql{
		Config: Config{name: name, password: password, port: port, databaseName: dbName},
	}
}

func (p *PostgreSql) InitDb() (interface{}, error) {

	db, err := sql.Open("postgres", p.Config.name+"://"+p.Config.name+":"+p.Config.password+"@"+p.Config.url+":"+p.Config.port+"/"+p.Config.databaseName+"?sslmode=disable")
	if err != nil {
		return nil, err
	}
	if err = db.Ping(); err != nil {
		return nil, err
	}
	if err = p.CreateTables(db); err != nil {
		return nil, err
	}
	return db, nil
}

func (p *PostgreSql) CreateTables(db *sql.DB) error {
	linksTable, err := db.Prepare(`CREATE TABLE IF NOT EXISTS links  (
		id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		url varchar(255) NOT NULL UNIQUE,
		short varchar(255) NOT NULL,
		createdtime timestamp
	)`)
	if err != nil {
		return err
	}
	linksTable.Exec()

	return nil
}

//Open/closed?
//type Home struct {window, door, nameRoom} -> TurnHeat(); TurnLight(),
//type HomeSmarter interface {TurnLight(), TurnHeat(), TurnCondicioner() }

//type Kitchen struct{wallpaper} TurnLight(); !change parent method; but override
//type BathRoom struct -> TurnHeat(){override own logic}; !change parent method; but override

//for App - type StorageConnecter  interface{
//Mongo
//Psql
//etc
//}

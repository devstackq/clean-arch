package db

import (
	"database/sql"

	"go.mongodb.org/mongo-driver/mongo"
)

type PostgreSql struct {
	Config
	// db *sql.DB
}

//|| add funcs; expand class
func (p *PostgreSql) Remove(id string) string {
	return "remove by id"
}

//set params outside
func NewPostgresStorage(name, password, url, port, dbName string) *PostgreSql {
	return &PostgreSql{
		Config: Config{name: name, password: password, port: port, databaseName: dbName},
	}
}

// cfg := &Config{}
//return Postgresql{Config: cfg.NewConfig() } // hard code here

func (p *PostgreSql) InitMongoDb() (*mongo.Database, error) {
	return nil, nil
}

func (p *PostgreSql) InitPostgresDb() (*sql.DB, error) {

	db, err := sql.Open("postgres", p.Config.name+"://"+p.Config.name+":"+p.Config.password+"@"+p.Config.url+":"+p.Config.port+"/"+p.Config.databaseName+"?sslmode=disable")
	if err != nil {
		return nil, err
	}
	if err = db.Ping(); err != nil {
		return nil, err
	}
	if err = p.CreateTables(db); err != nil {
		return nil, err
	}
	// p.db = db
	return db, nil
}

func (p *PostgreSql) CreateTables(db *sql.DB) error {
	linksTable, err := db.Prepare(`CREATE TABLE IF NOT EXISTS links  (
		id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		url varchar(255) NOT NULL UNIQUE,
		short varchar(255) NOT NULL,
		createdtime timestamp
	)`)
	if err != nil {
		return err
	}
	linksTable.Exec()

	return nil
}
